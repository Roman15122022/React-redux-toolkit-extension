name: CI/CD Pipeline
run-name: ${{ github.actor }} is testing out CI/CD 🚀

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - name: Checkout code 🔎
        uses: actions/checkout@v3

      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install modules 🧰
        run: yarn

      - name: Prettier check 🏁
        run: yarn prettier:check

      - name: Lint 💅
        run: yarn lint

      - name: Build project 🏗
        run: yarn build:release


      - name: Create ZIP file 📦
        run: zip -r build.zip dist

      - name: Check for build.zip 📦
        run: ls -l build.zip

      - name: Upload build.zip as artifact 📦
        uses: actions/upload-artifact@v3
        with:
          name: build-zip
          path: build.zip

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: build
    steps:
      - name: Checkout code 🔎
        uses: actions/checkout@v3

      - name: Create Release ✨
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v1.0.0',
              name: 'Release v1.0.0',
              draft: false,
              prerelease: false
            });
            return release.upload_url;

      - name: Upload build folder to release 📦
        id: upload_asset
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const uploadUrl = '${{ steps.create_release.outputs.upload_url }}';
            
            const assetPath = path.join(process.env.GITHUB_WORKSPACE, 'build.zip');
            const assetBuffer = fs.readFileSync(assetPath);
            await github.rest.repos.uploadReleaseAsset({
              url: uploadUrl,
              name: 'build.zip',
              data: assetBuffer,
              headers: {
                'content-type': 'application/zip',
                'content-length': assetBuffer.length
              }
            });
